---
- hosts: raspberries
  gather_facts: no
  become: yes

  pre_tasks:
    - name: Wait till RPI enters the running phase
      wait_for_connection:

  tasks:
    - name: Update the RPI
      apt:
        update_cache: yes

    #####################
    # SETUP STARTS HERE #
    #####################

    - name: Copy the files to the RPI
      copy:
        src: /picarfiles/
        dest: /home/pi/
        follow: yes

    - name: increase npm timeout to fix slow connections
      shell: npm config set fetch-retry-maxtimeout 60000 -g

    - name: install nodejs dependencies
      apt:
        name: nodejs
        state: present

    - name: install npm
      apt:
        name: npm
        state: present

    - name: install python3
      apt:
        name: python3
        state: present

    - name: install python3-pip
      apt:
        name: python3-pip
        state: present

    - name: Run the socket servers package.json
      npm:
        path: /home/pi/server

    - name: NPM run build
      command: npm run build
      args:
        chdir: /home/pi/server

    - name: Install the dependencies for the driver
      pip:
        requirements: /home/pi/driver/requirements.txt
        executable: pip3

    - name: lookup script files with .sh extension
      find:
        paths: /home/pi/scripts/
        file_type: file
        patterns: "*.sh"
      register: filelist

    - name: change permissions on the script files
      file:
        path: "{{ item.path }}"
        state: file
        mode: "0775"
      with_items: "{{ filelist.files }}"

    - name: Move the services files to the correct location
      copy:
        src: /home/pi/services/
        dest: /etc/systemd/system/
        remote_src: yes

    - name: Enable the driver service
      systemd:
        name: driver
        enabled: yes
        state: started

    - name: Enable the socket server service
      systemd:
        name: socket
        enabled: yes
        state: started

    - name: Enable the mjpeg streamer service
      systemd:
        name: mjpeg-streamer
        enabled: yes
        state: started

    - name: Enable the hotspot service
      systemd:
        name: hotspot
        enabled: yes
        state: started

    - name: reload the systemctl daemon to enable the services
      systemd:
        daemon_reload: yes

    - name: Enable I2C on the Raspberry Pi
      shell: "raspi-config nonint do_i2c 0"

    ################################
    # SETUP THE AUTOMATIC HOSTSPOT #
    ################################

    - name: Install dependencies for the hostspot
      apt:
        pkg:
          - dnsmasq
          - hostapd
        state: present

    - name: Install pip dependencies for the hostspot
      pip:
        requirements: /home/pi/hotspot/requirements.txt
        executable: pip3

    - name: Run the python script to configure the hotspot
      shell: "python3 /home/pi/hotspot/hotspot.py"

    - name: Unmask the hostapd service
      shell: "systemctl unmask hostapd"

    - name: Enable the hostapd service
      systemd:
        name: hostapd
        enabled: yes
        state: started
      ignore_errors: yes

    - name: Add lines to end of dhcpcd.conf
      blockinfile:
        path: /etc/dhcpcd.conf
        marker: # {mark} ANSIBLE MANAGED BLOCK
        block: |
          interface wlan0
          static ip_address=192.168.0.10/24
          denyinterfaces eth0
          denyinterfaces wlan0

    - name: Unblock wifi
      shell: "rfkill unblock wifi"

    - name: Enable the dnsmasq service
      systemd:
        name: dnsmasq
        enabled: yes
        state: started

    - name: Append lines to dnsmasq.conf
      copy:
        src: /home/pi/hotspot/dnsmasq.conf
        dest: /etc/dnsmasq.conf
        remote_src: yes

    ########################
    # SETUP MJPEG STREAMER #
    ########################

    - name: Install u-streamer dependencies
      apt:
        pkg:
          - libevent-dev
          - libjpeg62-turbo-dev
          - libbsd-dev
          - libsystemd-dev
          - git
        state: present

    - name: Clone the u-streamer repository
      git:
        dest: /home/pi/ustreamer
        repo: https://github.com/pikvm/ustreamer.git

    - name: run make in the ustreamer repository
      shell: "cd /home/pi/ustreamer && make"

    - name: Shutdown the RPI
      shell: shutdown -h now
      ignore_unreachable: true

    - name: Install qemu on local machine
      local_action:
        module: apk
        name: qemu-img
        update_cache: yes

    - name: Use qemu-img to create a disk image retry until the pi fully shuts down
      local_action:
        module: shell
        cmd: qemu-img convert -f qcow2 -O raw /picarimage/distro.qcow2 /picarimage/PiCarV.img
      register: result

      retries: 300
      delay: 1
      until: result.rc == 0
#    - name: Install PiShrink Dependencies parted
#      local_action:
#        module: apk
#        name: parted
#
#    - name: Install PiShrink Dependencies tune2fs
#      local_action:
#        module: apk
#        name: e2fsprogs-extra
###############################################################################################
#### This block doesn't work right now because pishrink doesn't work with swap partitions #####
###############################################################################################
# - name: Install PiShrink
#   local_action:
#     module: get_url
#     url: https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh
#     dest: /usr/local/bin
#
# - name: Make the PiShrink script executable
#   local_action:
#     module: file
#     path: /usr/local/bin/pishrink.sh
#     state: file
#     mode: "0775"
#
# - name: Change the permissions of the image file
#   local_action:
#     module: file
#     path: /picarimage/PiCarV.img
#     state: file
#     mode: "0777"
#
# - name: Run PiShrink
#   local_action:
#     module: shell
#     cmd: "pishrink.sh /picarimage/PiCarV.img"
